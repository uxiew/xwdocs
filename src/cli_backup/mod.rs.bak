//! 命令行工具模块

use clap::{Parser, Subcommand};
use std::error::Error;

pub mod scraper_cmd;
pub mod handler;

pub use handler::handle_cli;

#[derive(Parser)]
#[command(name = "xwdoc")] // 修改主命令名为 xwdoc
#[command(author, version, about, long_about = None)]
pub struct Cli {
    #[command(subcommand)]
    pub command: Commands,
}

#[derive(Subcommand)]
#[derive(Debug)] // Add Debug derive
pub enum Commands {
    /// 启动 Web 服务器
    #[command(name = "server")]
    Server {
        /// 主机地址
        #[arg(short, long, default_value = "127.0.0.1")]
        host: String,
        /// 端口
        #[arg(short, long, default_value_t = 9292)]
        port: u16,
    },
    /// 文档相关命令
    #[command(subcommand)]
    Docs(DocsCommand),
    /// 控制台相关命令
    #[command(subcommand)]
    Console(ConsoleCommand),
    /// 测试相关命令
    #[command(subcommand)]
    Test(TestCommand),
    /// 资源相关命令
    #[command(subcommand)]
    Assets(AssetsCommand),
    /// 爬虫相关命令
    #[command(subcommand)]
    Scraper(ScraperCommand),
}

#[derive(Subcommand)]
#[derive(Debug)] // Add Debug derive
pub enum ScraperCommand {
    /// 列出所有可用的爬虫类型
    List {},
    /// 运行指定类型的爬虫
    Run {
        /// 爬虫类型
        scraper_type: String,
        /// 文档版本
        version: String,
    },
}

#[derive(Subcommand)]
#[derive(Debug)] // Add Debug derive
pub enum DocsCommand {
    /// 列出可用文档
    List {},
    /// 下载文档
    Download {
        /// 文档名称列表
        docs: Vec<String>,
        /// 下载默认文档
        #[arg(long)]
        default: bool,
        /// 下载已安装文档
        #[arg(long)]
        installed: bool,
        /// 下载全部文档
        #[arg(long)]
        all: bool,
    },
    /// 生成 manifest 文件
    Manifest {},
    /// 生成/抓取文档
    #[command(name = "generate")]
    Generate {
        /// 文档名称
        doc: Option<String>,
        /// 文档版本 (可选)
        #[arg(long)]
        version: Option<String>,
    },
    /// 生成/抓取单页
    Page {
        /// 文档名称
        doc: String,
        /// 页面名称
        page: String,
    },
    /// 打包文档
    Package {
        /// 文档名称
        doc: String,
    },
    /// 删除文档包
    Clean {},
}

#[derive(Subcommand)]
#[derive(Debug)] // Add Debug derive
pub enum ConsoleCommand {
    /// 启动 REPL
    Console,
    /// 启动 Docs 模块 REPL
    Docs,
}

#[derive(Subcommand)]
#[derive(Debug)] // Add Debug derive
pub enum TestCommand {
    /// 运行所有测试
    All,
    /// 运行 Docs 测试
    Docs,
    /// 运行 App 测试
    App,
}

#[derive(Subcommand)]
#[derive(Debug)] // Add Debug derive
pub enum AssetsCommand {
    /// 编译前端资源
    Compile,
    /// 清理旧资源
    Clean,
}

/// 处理命令行参数
pub async fn handle_cli() -> Result<(), Box<dyn Error>> {
    println!("[cli/mod.rs] Entered handle_cli.");
    let cli = Cli::parse();
    println!("[cli/mod.rs] CLI args parsed: {:?}", cli.command);
    match cli.command {
        Commands::Server { host, port } => {
            println!("启动服务器在 {}:{}", host, port);
            crate::start(&host, port).await?
        },
        Commands::Docs(docs_cmd) => match docs_cmd {
            DocsCommand::List {} => {
                // 列出所有可用文档（从磁盘加载）
                let config = crate::core::config::Config::default();
                let mut registry = crate::docs::DocRegistry::new();
                if let Err(e) = registry.load_from_disk(&config.docs_path) {
                    eprintln!("加载文档失败: {}", e);
                    return Err(e.into());
                }
                println!("可用文档:");
                for doc in registry.all() {
                    if doc.version.is_empty() {
                        println!("- {}", doc.name);
                    } else {
                        println!("- {} {}", doc.name, doc.version);
                    }
                }
            },
            DocsCommand::Download { docs, default, installed, all } => {
                // 下载文档实现
                let mut targets = Vec::new();
                let config = crate::core::config::Config::default();
                let mut registry = crate::docs::DocRegistry::new();
                if let Err(e) = registry.load_from_disk(&config.docs_path) {
                    eprintln!("加载文档失败: {}", e);
                    return Err(e.into());
                }
                if default {
                    // 下载默认文档
                    targets = config.default_docs.clone();
                } else if all {
                    // 下载所有文档
                    targets = registry.all().iter().map(|d| d.name.clone()).collect();
                } else if installed {
                    // 下载已安装文档（此处等价于磁盘上已有的文档）
                    targets = registry.all().iter().map(|d| d.name.clone()).collect();
                } else if !docs.is_empty() {
                    targets = docs.clone();
                } else {
                    eprintln!("请指定要下载的文档，或使用 --default/--all/--installed 选项");
                    return Ok(());
                }
                for doc in targets {
                    println!("下载文档: {}", doc);
                    // 这里只抓取最新版本，url 为空
                    if let Err(e) = crate::scrape_async(&doc, "", "").await {
                        eprintln!("下载 {} 失败: {}", doc, e);
                    }
                }
                println!("下载完成");
            },
            DocsCommand::Manifest {} => {
                println!("生成文档清单...");
                crate::generate_manifest()?;
                println!("文档清单已生成");
            },
            /// 处理命令行参数
pub async fn handle_cli() -> Result<(), Box<dyn Error>> {
    let cli = Cli::parse();
    match &cli.command {
        Commands::Server { host, port } => {
            println!("启动服务器在 {}:{}", host, port);
            crate::start(host, port).await?;
        },
        Commands::Docs(docs_cmd) => match docs_cmd {
            DocsCommand::List {} => {
                println!("可用文档:");
                for doc in crate::get_default_docs() {
                    println!("  {}", doc);
                }
            },
            DocsCommand::Download { docs, all, default } => {
                // 下载指定文档
                if *all {
                    println!("下载所有文档");
                    // TODO: 实现所有文档下载
                } else if *default {
                    println!("下载默认文档");
                    for doc in crate::get_default_docs() {
                        println!("下载文档: {}", doc);
                        // TODO: 实现文档下载
                    }
                } else if !docs.is_empty() {
                    println!("下载指定文档");
                    for doc in docs {
                        println!("下载文档: {}", doc);
                        // TODO: 实现文档下载
                    }
                } else {
                    eprintln!("请指定要下载的文档，使用 --all 或 --default 或提供文档名列表");
                }
            },
            DocsCommand::Generate { doc, version } => {
                // 生成/抓取文档
                if let Some(doc_name) = doc {
                    let doc_version = version.as_deref().unwrap_or(""); // Use provided version or default
                    println!("抓取文档: {} (版本: {})", doc_name, if doc_version.is_empty() { "latest" } else { doc_version });
                    crate::scrape_async(&doc_name, doc_version, "").await?;
                } else {
                    eprintln!("请指定要抓取的文档名称");
                }
            },
            DocsCommand::Page { doc, page } => {
                println!("生成/抓取单页: {} {}", doc, page);
                // TODO: 实现单页抓取逻辑
            },
            DocsCommand::Package { doc } => {
                println!("打包文档: {}", doc);
                // TODO: 实现打包逻辑
            },
            DocsCommand::Clean {} => {
                println!("删除文档包");
                // TODO: 实现清理逻辑
            },
        },
        Commands::Console(console_cmd) => match console_cmd {
            ConsoleCommand::Console => {
                println!("启动 REPL");
                // TODO: 实现 REPL
            },
            ConsoleCommand::Docs => {
                println!("启动 Docs 模块 REPL");
                // TODO: 实现 Docs REPL
            },
        },
        Commands::Test(test_cmd) => match test_cmd {
            TestCommand::All => {
                println!("运行所有测试");
                // TODO: 实现所有测试
            },
            TestCommand::Docs => {
                println!("运行 Docs 测试");
                // TODO: 实现 Docs 测试
            },
            TestCommand::App => {
                println!("运行 App 测试");
                // TODO: 实现 App 测试
            },
        },
        Commands::Assets(assets_cmd) => match assets_cmd {
            AssetsCommand::Compile => {
                println!("编译前端资源");
                // TODO: 实现资源编译
            },
            AssetsCommand::Clean => {
                println!("清理旧资源");
                // TODO: 实现资源清理
            },
        },
        Commands::Scraper(scraper_cmd) => match scraper_cmd {
            ScraperCommand::List {} => {
                // 初始化过滤器注册表
                crate::filters::registry::initialize();

                // 创建爬虫工厂
                let factory = crate::scrapers::factory::ScraperFactory::new();

                // 列出所有可用的爬虫类型
                println!("可用的爬虫类型:");
                for scraper_type in factory.available_scrapers() {
                    println!("  - {}", scraper_type);
                }
            },
            ScraperCommand::Run { scraper_type, version } => {
                // 初始化过滤器注册表
                crate::filters::registry::initialize();

                // 创建爬虫工厂
                let factory = crate::scrapers::factory::ScraperFactory::new();

                // 创建爬虫
                match factory.create(scraper_type, version) {
                    Some(scraper) => {
                        // 显示爬虫信息
                        let doc = scraper.doc_scraper();
                        println!("爬取 {} 文档 (版本: {})", doc.name, doc.version);
                        println!("基础URL: {}", doc.base_url);
                        println!("输出路径: {}", doc.output_path);
                        println!("初始路径: {:?}", doc.initial_paths);

                        // 这里可以添加实际的爬取逻辑
                        println!("爬取完成");
                    },
                    None => {
                        return Err(format!("未知的爬虫类型: {}", scraper_type).into());
                    }
                }
            },
        },
    }
    Ok(())
}
}